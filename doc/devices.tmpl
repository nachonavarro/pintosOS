            +----------------------+
            |        OS 211        |
            |  TASK 0: ALARMCLOCK  |
            |    DESIGN DOCUMENT   |
            +----------------------+
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Corentin Herbinet <cah214@ic.ac.uk>
William Springsteen <ws1514@ic.ac.uk>
Vinothan Shankar <vws11@ic.ac.uk>
Ignacio Navarro <in714@ic.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


               PRELIMINARY QUESTIONS
               =====================

1. The Git command that should be run to retrieve a copy of our group's shared Pintos repository in our local directory is 'git clone https://gitlab.doc.ic.ac.uk/lab1516_spring/pintos_18.git'.  At least one of our members, however, has set up SSH keys and host aliases, and would use the shorter 'git clone gitlab:lab1516_spring/pintos_18.git'.

2. A call to 'strcpy()' can overflow the buffer reserved for its output string. 
In other words, the function doesn't know the length of the destination string,
so that if the string to be copied is longer than the reserved memory for 
the destination string, the string will be copied corrupting other memory 
(leading to crashes and potentially become an exploitable system).

3. The default length of a scheduler time slice in Pintos is 4 ticks, which is equivalent to 0.04 seconds, as the timer ticks 100 times per second.

4.

5. Reproducibility refers to the capacity of a phenomenon, particularly
an experimental result, to be replicated.  In a programming context,
this is of particular importance in testing: if a program does not
behave consistently, no test result can be relied upon, because even
if it passes once it might fail on the next invocation.  For behaviour
to be reproducible it must be clear what determines it (which, of
course, requires that it be deterministic).  Lack of reproducibility
makes debugging particularly difficult as the debugging process must
be run repeatedly until the behaviour to be studied actually occurs -
something which might never happen.

6. In Pintos we would first include the '<stdint.h>' and the '<inttypes.h>' header file.
The first header would let us create the uint64_t int and then with the second header
we would 'printf()' the int with the macros PRIu64:
  uint64_t x = ...;
  printf("value=%"PRIu64"\n", x);

7. Essentially a lock is a subset of a semaphore where the initial value is set to 1. 
So then regarding functions, a lock has a 'lock_release()' equivalent to a 
semaphore's 'sema_up()', a 'lock_try_acquire()' equivalent to a 
semaphore's 'sema_try_down()' and a 'acquire()' equivalent to a semaphore's
'sema_down()'. 
Regarding data structures, a semaphore struct has a list of waiting threads, 
while a lock struct has a semaphore struct that itself has a list of waiting threads.
The extra property that locks have that semaphores do not is that only the thread that acquires a lock, called the lock's "owner", is allowed to release it. 

8. The sum of the sizes of a struct thread and the associated thread's
execution stack is limited to a single page of memory, 4KiB in size.
Because the kernel stack grows downward from the end of the page, and
the struct thread is located at the beginning, if the stack grows too
large it will corrupt the thread state struct.  This overflow is
detected by examining the final member of the struct, ordinarily set
to the value THREAD_MAGIC.  If it is not, the stack must have
overflowed and rewritten it.  While it is in principle possible for
the overflowing value to be equal to THREAD_MAGIC, Pintos does not
handle this (unlikely) case.


9. If the test 'src/tests/devices/alarm-multiple' fails, we would find its output log in the file 'src/tests/devices/alarm-multiple.output' and its result log in the file 'src/tests/devices/alarm-multiple.result'.


                 DESIGN QUESTIONS
                 ================

---- DATA STRUCTURES ----

>> A1: (2 marks) 
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: (2 marks)
>> Briefly describe what happens in a call to timer_sleep(),
>> including the actions performed by the timer interrupt handler 
>> on each timer tick.

>> A3: (2 marks)
>> What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

---- SYNCHRONIZATION ----

>> A4: (1 mark)
>> How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: (1 mark)
>> How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: (2 marks)
>> Why did you choose this design?  In what ways is it superior to
>> another design you considered?

